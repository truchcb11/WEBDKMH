#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WEBDKMH
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Elearning")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertLecturer(Lecturer instance);
    partial void UpdateLecturer(Lecturer instance);
    partial void DeleteLecturer(Lecturer instance);
    partial void InsertLesson(Lesson instance);
    partial void UpdateLesson(Lesson instance);
    partial void DeleteLesson(Lesson instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ElearningConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<Lecturer> Lecturers
		{
			get
			{
				return this.GetTable<Lecturer>();
			}
		}
		
		public System.Data.Linq.Table<Lesson> Lessons
		{
			get
			{
				return this.GetTable<Lesson>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Catename;
		
		private string _Images;
		
		private EntitySet<Subject> _Subjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCatenameChanging(string value);
    partial void OnCatenameChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    #endregion
		
		public Category()
		{
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catename", DbType="NVarChar(50)")]
		public string Catename
		{
			get
			{
				return this._Catename;
			}
			set
			{
				if ((this._Catename != value))
				{
					this.OnCatenameChanging(value);
					this.SendPropertyChanging();
					this._Catename = value;
					this.SendPropertyChanged("Catename");
					this.OnCatenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Images", DbType="VarChar(100)")]
		public string Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				if ((this._Images != value))
				{
					this.OnImagesChanging(value);
					this.SendPropertyChanging();
					this._Images = value;
					this.SendPropertyChanged("Images");
					this.OnImagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subject", Storage="_Subjects", ThisKey="ID", OtherKey="IDcate")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDlecturers;
		
		private int _IDSubjects;
		
		private string _Coursename;
		
		private System.Nullable<System.TimeSpan> _Starttime;
		
		private System.Nullable<System.TimeSpan> _Endtime;
		
		private System.Nullable<System.DateTime> _Startdate;
		
		private System.Nullable<System.DateTime> _Enddate;
		
		private int _ID;
		
		private EntityRef<Lecturer> _Lecturer;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDlecturersChanging(int value);
    partial void OnIDlecturersChanged();
    partial void OnIDSubjectsChanging(int value);
    partial void OnIDSubjectsChanged();
    partial void OnCoursenameChanging(string value);
    partial void OnCoursenameChanged();
    partial void OnStarttimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStarttimeChanged();
    partial void OnEndtimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEndtimeChanged();
    partial void OnStartdateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartdateChanged();
    partial void OnEnddateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnddateChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Course()
		{
			this._Lecturer = default(EntityRef<Lecturer>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDlecturers", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDlecturers
		{
			get
			{
				return this._IDlecturers;
			}
			set
			{
				if ((this._IDlecturers != value))
				{
					if (this._Lecturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDlecturersChanging(value);
					this.SendPropertyChanging();
					this._IDlecturers = value;
					this.SendPropertyChanged("IDlecturers");
					this.OnIDlecturersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSubjects", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDSubjects
		{
			get
			{
				return this._IDSubjects;
			}
			set
			{
				if ((this._IDSubjects != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSubjectsChanging(value);
					this.SendPropertyChanging();
					this._IDSubjects = value;
					this.SendPropertyChanged("IDSubjects");
					this.OnIDSubjectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coursename", DbType="NVarChar(50)")]
		public string Coursename
		{
			get
			{
				return this._Coursename;
			}
			set
			{
				if ((this._Coursename != value))
				{
					this.OnCoursenameChanging(value);
					this.SendPropertyChanging();
					this._Coursename = value;
					this.SendPropertyChanged("Coursename");
					this.OnCoursenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Starttime", DbType="Time")]
		public System.Nullable<System.TimeSpan> Starttime
		{
			get
			{
				return this._Starttime;
			}
			set
			{
				if ((this._Starttime != value))
				{
					this.OnStarttimeChanging(value);
					this.SendPropertyChanging();
					this._Starttime = value;
					this.SendPropertyChanged("Starttime");
					this.OnStarttimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Endtime", DbType="Time")]
		public System.Nullable<System.TimeSpan> Endtime
		{
			get
			{
				return this._Endtime;
			}
			set
			{
				if ((this._Endtime != value))
				{
					this.OnEndtimeChanging(value);
					this.SendPropertyChanging();
					this._Endtime = value;
					this.SendPropertyChanged("Endtime");
					this.OnEndtimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Startdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> Startdate
		{
			get
			{
				return this._Startdate;
			}
			set
			{
				if ((this._Startdate != value))
				{
					this.OnStartdateChanging(value);
					this.SendPropertyChanging();
					this._Startdate = value;
					this.SendPropertyChanged("Startdate");
					this.OnStartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enddate", DbType="DateTime")]
		public System.Nullable<System.DateTime> Enddate
		{
			get
			{
				return this._Enddate;
			}
			set
			{
				if ((this._Enddate != value))
				{
					this.OnEnddateChanging(value);
					this.SendPropertyChanging();
					this._Enddate = value;
					this.SendPropertyChanged("Enddate");
					this.OnEnddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturer_Course", Storage="_Lecturer", ThisKey="IDlecturers", OtherKey="ID", IsForeignKey=true)]
		public Lecturer Lecturer
		{
			get
			{
				return this._Lecturer.Entity;
			}
			set
			{
				Lecturer previousValue = this._Lecturer.Entity;
				if (((previousValue != value) 
							|| (this._Lecturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecturer.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Lecturer.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._IDlecturers = value.ID;
					}
					else
					{
						this._IDlecturers = default(int);
					}
					this.SendPropertyChanged("Lecturer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Course", Storage="_Subject", ThisKey="IDSubjects", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._IDSubjects = value.ID;
					}
					else
					{
						this._IDSubjects = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _number_of_questions;
		
		private EntitySet<Result> _Results;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onnumber_of_questionsChanging(System.Nullable<int> value);
    partial void Onnumber_of_questionsChanged();
    #endregion
		
		public Exam()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[number of questions]", Storage="_number_of_questions", DbType="Int")]
		public System.Nullable<int> number_of_questions
		{
			get
			{
				return this._number_of_questions;
			}
			set
			{
				if ((this._number_of_questions != value))
				{
					this.Onnumber_of_questionsChanging(value);
					this.SendPropertyChanging();
					this._number_of_questions = value;
					this.SendPropertyChanged("number_of_questions");
					this.Onnumber_of_questionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_Result", Storage="_Results", ThisKey="ID", OtherKey="IDexam")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUser;
		
		private int _IDSub;
		
		private System.Nullable<int> _IDCou;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnIDSubChanging(int value);
    partial void OnIDSubChanged();
    partial void OnIDCouChanging(System.Nullable<int> value);
    partial void OnIDCouChanged();
    #endregion
		
		public History()
		{
			this._Subject = default(EntityRef<Subject>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSub", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDSub
		{
			get
			{
				return this._IDSub;
			}
			set
			{
				if ((this._IDSub != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSubChanging(value);
					this.SendPropertyChanging();
					this._IDSub = value;
					this.SendPropertyChanged("IDSub");
					this.OnIDSubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCou", DbType="Int")]
		public System.Nullable<int> IDCou
		{
			get
			{
				return this._IDCou;
			}
			set
			{
				if ((this._IDCou != value))
				{
					this.OnIDCouChanging(value);
					this.SendPropertyChanging();
					this._IDCou = value;
					this.SendPropertyChanged("IDCou");
					this.OnIDCouChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_History", Storage="_Subject", ThisKey="IDSub", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._IDSub = value.ID;
					}
					else
					{
						this._IDSub = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_History", Storage="_User", ThisKey="IDUser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._IDUser = value.ID;
					}
					else
					{
						this._IDUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecturers")]
	public partial class Lecturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Fullname;
		
		private string _Address;
		
		private string _email;
		
		private System.Nullable<int> _phone;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneChanging(System.Nullable<int> value);
    partial void OnphoneChanged();
    #endregion
		
		public Lecturer()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(50)")]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Int")]
		public System.Nullable<int> phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturer_Course", Storage="_Courses", ThisKey="ID", OtherKey="IDlecturers")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Lecturer = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Lecturer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lesson")]
	public partial class Lesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TieuDe;
		
		private string _Video;
		
		private string _Describe;
		
		private System.Nullable<int> _IDSub;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTieuDeChanging(string value);
    partial void OnTieuDeChanged();
    partial void OnVideoChanging(string value);
    partial void OnVideoChanged();
    partial void OnDescribeChanging(string value);
    partial void OnDescribeChanged();
    partial void OnIDSubChanging(System.Nullable<int> value);
    partial void OnIDSubChanged();
    #endregion
		
		public Lesson()
		{
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TieuDe", DbType="NVarChar(50)")]
		public string TieuDe
		{
			get
			{
				return this._TieuDe;
			}
			set
			{
				if ((this._TieuDe != value))
				{
					this.OnTieuDeChanging(value);
					this.SendPropertyChanging();
					this._TieuDe = value;
					this.SendPropertyChanged("TieuDe");
					this.OnTieuDeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Video", DbType="NVarChar(100)")]
		public string Video
		{
			get
			{
				return this._Video;
			}
			set
			{
				if ((this._Video != value))
				{
					this.OnVideoChanging(value);
					this.SendPropertyChanging();
					this._Video = value;
					this.SendPropertyChanged("Video");
					this.OnVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describe", DbType="NVarChar(1000)")]
		public string Describe
		{
			get
			{
				return this._Describe;
			}
			set
			{
				if ((this._Describe != value))
				{
					this.OnDescribeChanging(value);
					this.SendPropertyChanging();
					this._Describe = value;
					this.SendPropertyChanged("Describe");
					this.OnDescribeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSub", DbType="Int")]
		public System.Nullable<int> IDSub
		{
			get
			{
				return this._IDSub;
			}
			set
			{
				if ((this._IDSub != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSubChanging(value);
					this.SendPropertyChanging();
					this._IDSub = value;
					this.SendPropertyChanged("IDSub");
					this.OnIDSubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Lesson", Storage="_Subject", ThisKey="IDSub", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Lessons.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Lessons.Add(this);
						this._IDSub = value.ID;
					}
					else
					{
						this._IDSub = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Question1;
		
		private string _answerA;
		
		private string _answerB;
		
		private string _answerC;
		
		private string _answerD;
		
		private string _answer;
		
		private System.Nullable<int> _IDsub;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestion1Changing(string value);
    partial void OnQuestion1Changed();
    partial void OnanswerAChanging(string value);
    partial void OnanswerAChanged();
    partial void OnanswerBChanging(string value);
    partial void OnanswerBChanged();
    partial void OnanswerCChanging(string value);
    partial void OnanswerCChanged();
    partial void OnanswerDChanging(string value);
    partial void OnanswerDChanged();
    partial void OnanswerChanging(string value);
    partial void OnanswerChanged();
    partial void OnIDsubChanging(System.Nullable<int> value);
    partial void OnIDsubChanged();
    #endregion
		
		public Question()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Question", Storage="_Question1", DbType="NVarChar(250)")]
		public string Question1
		{
			get
			{
				return this._Question1;
			}
			set
			{
				if ((this._Question1 != value))
				{
					this.OnQuestion1Changing(value);
					this.SendPropertyChanging();
					this._Question1 = value;
					this.SendPropertyChanged("Question1");
					this.OnQuestion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerA", DbType="NVarChar(250)")]
		public string answerA
		{
			get
			{
				return this._answerA;
			}
			set
			{
				if ((this._answerA != value))
				{
					this.OnanswerAChanging(value);
					this.SendPropertyChanging();
					this._answerA = value;
					this.SendPropertyChanged("answerA");
					this.OnanswerAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerB", DbType="NVarChar(250)")]
		public string answerB
		{
			get
			{
				return this._answerB;
			}
			set
			{
				if ((this._answerB != value))
				{
					this.OnanswerBChanging(value);
					this.SendPropertyChanging();
					this._answerB = value;
					this.SendPropertyChanged("answerB");
					this.OnanswerBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerC", DbType="NVarChar(250)")]
		public string answerC
		{
			get
			{
				return this._answerC;
			}
			set
			{
				if ((this._answerC != value))
				{
					this.OnanswerCChanging(value);
					this.SendPropertyChanging();
					this._answerC = value;
					this.SendPropertyChanged("answerC");
					this.OnanswerCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerD", DbType="NVarChar(250)")]
		public string answerD
		{
			get
			{
				return this._answerD;
			}
			set
			{
				if ((this._answerD != value))
				{
					this.OnanswerDChanging(value);
					this.SendPropertyChanging();
					this._answerD = value;
					this.SendPropertyChanged("answerD");
					this.OnanswerDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="NVarChar(250)")]
		public string answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDsub", DbType="Int")]
		public System.Nullable<int> IDsub
		{
			get
			{
				return this._IDsub;
			}
			set
			{
				if ((this._IDsub != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDsubChanging(value);
					this.SendPropertyChanging();
					this._IDsub = value;
					this.SendPropertyChanged("IDsub");
					this.OnIDsubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Result", Storage="_Results", ThisKey="ID", OtherKey="IDques")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Question", Storage="_Subject", ThisKey="IDsub", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._IDsub = value.ID;
					}
					else
					{
						this._IDsub = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDuser;
		
		private int _IDexam;
		
		private int _IDques;
		
		private string _answer;
		
		private EntityRef<Exam> _Exam;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDuserChanging(int value);
    partial void OnIDuserChanged();
    partial void OnIDexamChanging(int value);
    partial void OnIDexamChanged();
    partial void OnIDquesChanging(int value);
    partial void OnIDquesChanged();
    partial void OnanswerChanging(string value);
    partial void OnanswerChanged();
    #endregion
		
		public Result()
		{
			this._Exam = default(EntityRef<Exam>);
			this._Question = default(EntityRef<Question>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDuser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDuser
		{
			get
			{
				return this._IDuser;
			}
			set
			{
				if ((this._IDuser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDuserChanging(value);
					this.SendPropertyChanging();
					this._IDuser = value;
					this.SendPropertyChanged("IDuser");
					this.OnIDuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDexam", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDexam
		{
			get
			{
				return this._IDexam;
			}
			set
			{
				if ((this._IDexam != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDexamChanging(value);
					this.SendPropertyChanging();
					this._IDexam = value;
					this.SendPropertyChanged("IDexam");
					this.OnIDexamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDques", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDques
		{
			get
			{
				return this._IDques;
			}
			set
			{
				if ((this._IDques != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDquesChanging(value);
					this.SendPropertyChanging();
					this._IDques = value;
					this.SendPropertyChanged("IDques");
					this.OnIDquesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="NVarChar(250)")]
		public string answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_Result", Storage="_Exam", ThisKey="IDexam", OtherKey="ID", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._IDexam = value.ID;
					}
					else
					{
						this._IDexam = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Result", Storage="_Question", ThisKey="IDques", OtherKey="ID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._IDques = value.ID;
					}
					else
					{
						this._IDques = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Result", Storage="_User", ThisKey="IDuser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._IDuser = value.ID;
					}
					else
					{
						this._IDuser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Rolename;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRolenameChanging(string value);
    partial void OnRolenameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rolename", DbType="NVarChar(10)")]
		public string Rolename
		{
			get
			{
				return this._Rolename;
			}
			set
			{
				if ((this._Rolename != value))
				{
					this.OnRolenameChanging(value);
					this.SendPropertyChanging();
					this._Rolename = value;
					this.SendPropertyChanged("Rolename");
					this.OnRolenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="ID", OtherKey="IDRoll")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _MaSubhect;
		
		private string _SubjectTitle;
		
		private string _Describe;
		
		private string _DKtienquyet;
		
		private System.Nullable<int> _IDcate;
		
		private string _Images;
		
		private System.Nullable<double> _Price;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<Lesson> _Lessons;
		
		private EntitySet<Question> _Questions;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMaSubhectChanging(string value);
    partial void OnMaSubhectChanged();
    partial void OnSubjectTitleChanging(string value);
    partial void OnSubjectTitleChanged();
    partial void OnDescribeChanging(string value);
    partial void OnDescribeChanged();
    partial void OnDKtienquyetChanging(string value);
    partial void OnDKtienquyetChanged();
    partial void OnIDcateChanging(System.Nullable<int> value);
    partial void OnIDcateChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    #endregion
		
		public Subject()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._Lessons = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lessons), new Action<Lesson>(this.detach_Lessons));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSubhect", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MaSubhect
		{
			get
			{
				return this._MaSubhect;
			}
			set
			{
				if ((this._MaSubhect != value))
				{
					this.OnMaSubhectChanging(value);
					this.SendPropertyChanging();
					this._MaSubhect = value;
					this.SendPropertyChanged("MaSubhect");
					this.OnMaSubhectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectTitle", DbType="NVarChar(50)")]
		public string SubjectTitle
		{
			get
			{
				return this._SubjectTitle;
			}
			set
			{
				if ((this._SubjectTitle != value))
				{
					this.OnSubjectTitleChanging(value);
					this.SendPropertyChanging();
					this._SubjectTitle = value;
					this.SendPropertyChanged("SubjectTitle");
					this.OnSubjectTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describe", DbType="NVarChar(1000)")]
		public string Describe
		{
			get
			{
				return this._Describe;
			}
			set
			{
				if ((this._Describe != value))
				{
					this.OnDescribeChanging(value);
					this.SendPropertyChanging();
					this._Describe = value;
					this.SendPropertyChanged("Describe");
					this.OnDescribeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DKtienquyet", DbType="VarChar(50)")]
		public string DKtienquyet
		{
			get
			{
				return this._DKtienquyet;
			}
			set
			{
				if ((this._DKtienquyet != value))
				{
					this.OnDKtienquyetChanging(value);
					this.SendPropertyChanging();
					this._DKtienquyet = value;
					this.SendPropertyChanged("DKtienquyet");
					this.OnDKtienquyetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcate", DbType="Int")]
		public System.Nullable<int> IDcate
		{
			get
			{
				return this._IDcate;
			}
			set
			{
				if ((this._IDcate != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcateChanging(value);
					this.SendPropertyChanging();
					this._IDcate = value;
					this.SendPropertyChanged("IDcate");
					this.OnIDcateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Images", DbType="VarChar(100)")]
		public string Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				if ((this._Images != value))
				{
					this.OnImagesChanging(value);
					this.SendPropertyChanging();
					this._Images = value;
					this.SendPropertyChanged("Images");
					this.OnImagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Course", Storage="_Courses", ThisKey="ID", OtherKey="IDSubjects")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_History", Storage="_Histories", ThisKey="ID", OtherKey="IDSub")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Lesson", Storage="_Lessons", ThisKey="ID", OtherKey="IDSub")]
		public EntitySet<Lesson> Lessons
		{
			get
			{
				return this._Lessons;
			}
			set
			{
				this._Lessons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Question", Storage="_Questions", ThisKey="ID", OtherKey="IDsub")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subject", Storage="_Category", ThisKey="IDcate", OtherKey="ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._IDcate = value.ID;
					}
					else
					{
						this._IDcate = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Email;
		
		private string _password;
		
		private string _Fullname;
		
		private string _Address;
		
		private System.Nullable<int> _Phone;
		
		private System.Nullable<int> _IDRoll;
		
		private System.Nullable<bool> _Verify;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(System.Nullable<int> value);
    partial void OnPhoneChanged();
    partial void OnIDRollChanging(System.Nullable<int> value);
    partial void OnIDRollChanged();
    partial void OnVerifyChanging(System.Nullable<bool> value);
    partial void OnVerifyChanged();
    #endregion
		
		public User()
		{
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Int")]
		public System.Nullable<int> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRoll", DbType="Int")]
		public System.Nullable<int> IDRoll
		{
			get
			{
				return this._IDRoll;
			}
			set
			{
				if ((this._IDRoll != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRollChanging(value);
					this.SendPropertyChanging();
					this._IDRoll = value;
					this.SendPropertyChanged("IDRoll");
					this.OnIDRollChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verify", DbType="Bit")]
		public System.Nullable<bool> Verify
		{
			get
			{
				return this._Verify;
			}
			set
			{
				if ((this._Verify != value))
				{
					this.OnVerifyChanging(value);
					this.SendPropertyChanging();
					this._Verify = value;
					this.SendPropertyChanged("Verify");
					this.OnVerifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_History", Storage="_Histories", ThisKey="ID", OtherKey="IDUser")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Result", Storage="_Results", ThisKey="ID", OtherKey="IDuser")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="IDRoll", OtherKey="ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._IDRoll = value.ID;
					}
					else
					{
						this._IDRoll = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
